/*
  ModbusTCP_RU.h — библиотека Arduino для реализации Modbus TCP Master и Slave.
  Версия: V-0.1.2
  Оригинальный автор: Marco Gerritse (2013)
  Форк и доработка: UterGrooll (2025)
  Протестировано на сетевом модуле W5500 TCP/IP (Ethernet)

  Написано и протестировано с Arduino 2.3.5

  Для этой библиотеки в качестве основы использовались следующие библиотеки:
  
    [1] Mudbus.h — библиотека Arduino для реализации Modbus TCP Slave.
        Авторское право (C) 2011  Dee Wykoff
    [2] Коды функций 15 и 16 добавлены Martin Pettersson

  Для написания этой библиотеки использовались следующие спецификации:
  
    [3] Open Modbus/TCP Specification, версия 1.0, 29 марта 1999 г.
        Автор: Andy Swales, Schneider Electric
    [4] Modbus Application Protocol Specification V1.1b3, 26 апреля 2002 г.
        Источник: http://www.modbus.org

  Внешние программы, использованные для тестирования:
  
    [5] ModbusPoll — https://www.modbustools.com/modbus_poll.html
    [6] Rapid Scada — https://rapidscada.ru/
    

  Эта библиотека использует один блок памяти для всех данных Modbus (массив `mbData[]`).
  Эти данные могут быть доступны через различные функции Modbus —
  либо через 16-битный доступ, либо побитово. Длина массива `mbData` должна быть не менее 1.

  Реализованные функции Modbus:
    - Для Master: 1, 2, 3, 4, 5, 6, 15, 16
    - Для Slave:  1, 2, 3, 4, 5, 6, 15, 16

  Все внутренние и внешние адреса начинаются с нуля.

  --- СПИСОК ИЗМЕНЕНИЙ ---
  [2025-06-10] UterGrooll: Основные изменения в библиотеке:
  
  1. Структурные улучшения:
     - Добавлены константы для максимальных значений:
       * MB_MAX_COILS (2000)
       * MB_MAX_REGISTERS (125)
       * MB_MAX_MULTIPLE_COILS (800)
       * MB_MAX_MULTIPLE_REGISTERS (100)
     - Добавлены константы для таймаутов:
       * MB_PACKET_TIMEOUT (50 мс)
       * MB_READ_TIMEOUT (1000 мс)
     - Улучшена обработка ошибок и проверки границ
     - Добавлена защита от переполнения буферов
  
  2. Улучшение производительности:
     - Удалены все блокирующие delay()
     - Добавлена неблокирующая обработка с использованием millis()
     - Оптимизирована работа с буферами
  
  3. Улучшение читаемости:
     - Все комментарии переведены на русский язык
     - Добавлены подробные комментарии к сложным участкам кода
     - Улучшено форматирование кода
     - Добавлены разделители между логическими блоками
  
  4. Оптимизации:
     - Использование констант вместо магических чисел
     - Улучшена обработка буферов
     - Добавлены проверки на переполнение
  
  5. Дополнительные улучшения:
     - Добавлены комментарии к функциям
     - Улучшена структура заголовочного файла
     - Добавлены описания параметров функций
     - Улучшена обработка сетевых операций
  
  6. Изменения в примерах:
     - Обновлен пример Slave_relay.ino
     - Добавлена неблокирующая обработка
     - Улучшена обработка ошибок
     - Добавлен отладочный вывод

  История версий:
  V-0.1.2 — 2025-06-10
    * Полная переработка библиотеки
    * Улучшение производительности и надежности
    * Перевод документации на русский язык

  V-0.1.1 — 2013-06-02
    * Исправление ошибок

  V-0.1.0 — 2013-03-02
    * Первая версия
*/

#ifndef ModbusTCP_RU_h
#define ModbusTCP_RU_h

#include "Arduino.h"
#include <SPI.h>
#include <Ethernet.h>

// Константы библиотеки
#define MB_PORT 502                    // Стандартный порт Modbus TCP
#define MB_BUFFER_SIZE 260            // Размер буфера для приема/передачи данных
#define MB_TIMEOUT 1000               // Таймаут ожидания ответа (мс)
#define MB_MAX_COILS 2000            // Максимальное количество катушек
#define MB_MAX_REGISTERS 125         // Максимальное количество регистров
#define MB_MAX_MULTIPLE_COILS 800    // Максимальное количество катушек для множественной записи
#define MB_MAX_MULTIPLE_REGISTERS 100 // Максимальное количество регистров для множественной записи
#define MB_DATA_LEN 30               // Размер массива данных Modbus

// Коды функций Modbus
enum MB_FC {
  MB_FC_NONE                     = 0,  // Нет функции
  MB_FC_READ_COILS               = 1,  // Чтение катушек
  MB_FC_READ_DISCRETE_INPUT      = 2,  // Чтение дискретных входов
  MB_FC_READ_REGISTERS           = 3,  // Чтение регистров хранения
  MB_FC_READ_INPUT_REGISTER      = 4,  // Чтение регистров ввода
  MB_FC_WRITE_COIL               = 5,  // Запись одной катушки
  MB_FC_WRITE_REGISTER           = 6,  // Запись одного регистра
  MB_FC_WRITE_MULTIPLE_COILS     = 15, // Запись нескольких катушек
  MB_FC_WRITE_MULTIPLE_REGISTERS = 16  // Запись нескольких регистров
};

class ModbusTCP_RU
{
public:
  // Конструктор
  ModbusTCP_RU();
  
  // Общие методы
  word MbData[MB_DATA_LEN];              // Блок памяти для хранения данных Modbus
  boolean GetBit(word Number);           // Получение значения бита
  boolean SetBit(word Number, boolean Data); // Установка значения бита
  
  // Методы Modbus Master
  void Req(MB_FC FC, word Ref, word Count, word Pos); // Отправка запроса
  void MbmRun();                        // Обработка ответа от ведомого устройства
  IPAddress remSlaveIP;                 // IP-адрес ведомого устройства
  
  // Методы Modbus Slave
  void MbsRun();                        // Обработка входящих запросов
  word GetDataLen();                    // Получение длины массива данных
  
private: 
  // Общие методы
  MB_FC SetFC(int fc);                  // Преобразование кода функции
  
  // Переменные Modbus Master
  uint8_t MbmByteArray[MB_BUFFER_SIZE]; // Буфер для приема/передачи данных
  MB_FC MbmFC;                          // Текущая функция
  int MbmCounter;                       // Счетчик байтов
  void MbmProcess();                    // Обработка полученных данных
  word MbmPos;                          // Позиция в массиве данных
  word MbmBitCount;                     // Количество битов
  
  // Переменные Modbus Slave
  uint8_t MbsByteArray[MB_BUFFER_SIZE]; // Буфер для приема/передачи данных
  MB_FC MbsFC;                          // Текущая функция
};

#endif